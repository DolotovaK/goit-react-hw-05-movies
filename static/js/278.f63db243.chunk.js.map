{"version":3,"file":"static/js/278.f63db243.chunk.js","mappings":"oMAEO,SAASA,EAAT,GAA4B,IAAVC,EAAS,EAATA,OACfC,GAAWC,EAAAA,EAAAA,MACjB,OACI,wBACKF,EAAOG,KAAI,YAAoB,IAAjBC,EAAgB,EAAhBA,GAAIC,EAAY,EAAZA,MACf,OACI,yBACI,SAAC,EAAAC,KAAD,CAAMC,GAAE,kBAAaH,GAAMI,MAAO,CAAEC,KAAMR,GAA1C,SAAuDI,KADlDD,EAIhB,KAGZ,C,0HCZYM,EAAUC,EAAAA,QAAAA,IAAH,sJAQPC,EAAQD,EAAAA,QAAAA,MAAH,+FAMLE,GAAOF,EAAAA,EAAAA,SAAOG,EAAAA,IAAPH,CAAH,+F,SCfV,SAASI,EAAT,GAAyC,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC/B,OACI,UAACP,EAAD,YACI,SAACG,EAAD,KACA,SAACD,EAAD,CAAOM,KAAK,OAAOF,MAAOA,EAAOC,SAAU,SAAAE,GAAG,OAAIF,EAASE,EAAIC,OAAOJ,MAAxB,MAGzD,C,8BCFc,SAASK,IAAc,IAAD,EACjC,GAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOtB,EAAP,KAAeuB,EAAf,KACA,GAA0BD,EAAAA,EAAAA,UAAS,MAAnC,eAAOE,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,mBAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAS,UAAGF,EAAaG,IAAI,eAApB,QAA+B,GAe9C,OARAC,EAAAA,EAAAA,YAAU,WACY,KAAdF,IAIJG,EAAAA,EAAAA,IAAeH,GAAWI,MAAK,gBAAGC,EAAH,EAAGA,QAAH,OAAiBX,EAAUW,EAA3B,IAAqCC,OAAM,SAAAX,GAAK,OAAIC,EAASD,EAAb,GAClF,GAAE,CAACK,KAGA,4BACKL,IAAS,yBAAIA,EAAMY,QAAV,gCACRZ,IACE,iCACI,SAACT,EAAD,CAAWC,MAAOa,EAAWZ,SAlB7C,SAAuBoB,GAEnBT,EAD4B,KAATS,EAAc,CAAEA,KAAAA,GAAS,CAAC,EAEhD,IAgB8B,KAAdR,GAAsC,IAAlB7B,EAAOsC,SAAgB,8DAC5C,SAACvC,EAAA,EAAD,CAAQC,OAAQA,SAKnC,C,sICtCKuC,EAAU,mCACVC,EAAW,gCAEV,SAAeC,IAAtB,4CAAO,OAAP,oBAAO,oGACkBC,MAAM,GAAD,OACvBF,EADuB,6CACsBD,IAF7C,WACCI,EADD,QAISC,GAJT,sBAKG,IAAIC,MAAM,UALb,uBAOQF,EAASG,OAPjB,0GAUA,SAAed,EAAtB,+CAAO,OAAP,oBAAO,WAA8Be,GAA9B,uFACkBL,MAAM,GAAD,OACvBF,EADuB,8BACOO,EADP,4BACgCR,IAFvD,WACCI,EADD,QAISC,GAJT,sBAKG,IAAIC,MAAM,UALb,uBAOQF,EAASG,OAPjB,0GAUA,SAAeE,EAAtB,kC,aAAO,O,oBAAA,WAA+B5C,GAA/B,uFACkBsC,MAAM,GAAD,OAAIF,EAAJ,iBAAqBpC,EAArB,qBAAoCmC,IAD3D,WACCI,EADD,QAESC,GAFT,sBAGG,IAAIC,MAAM,QAHb,uBAKQF,EAASG,OALjB,0G","sources":["components/Movies/Movies.jsx","components/SearchBox/SearchBox.styled.js","components/SearchBox/SearchBox.jsx","pages/MoviesPage.jsx","services/fetchMovies.js"],"sourcesContent":["import { Link, useLocation } from \"react-router-dom\";\n\nexport function Movies({ movies }){\n    const location = useLocation();\n    return (\n        <ul>\n            {movies.map(({ id, title }) => {\n                return (\n                    <li key={id}>\n                        <Link to={`/movies/${id}`} state={{ from: location }}>{title}</Link>\n                    </li>\n                );\n            })}\n        </ul>\n    );\n};","import styled from 'styled-components';\nimport { HiSearch } from 'react-icons/hi';\n\nexport const Wrapper = styled.div`\n  display: inline-flex;\n  align-items: center;\n  position: relative;\n  margin-bottom: 16px;\n  text-transform: uppercase;\n`;\n\nexport const Input = styled.input`\n  padding: 8px 32px 8px 8px;\n  border-radius: 4px;\n  font: inherit;\n`;\n\nexport const Icon = styled(HiSearch)`\n  width: 20px;\n  height: 20px;\n  position: absolute;\n  right: 6px;\n`;\n","import { Icon, Input, Wrapper } from \"./SearchBox.styled\";\n\nexport function SearchBox({ value, onChange }) {\n    return (\n        <Wrapper>\n            <Icon />\n            <Input type=\"text\" value={value} onChange={evt => onChange(evt.target.value)} />\n        </Wrapper>\n    );\n};","import { Movies } from \"components/Movies/Movies\";\nimport { SearchBox } from \"components/SearchBox/SearchBox\";\nimport { useEffect } from \"react\";\nimport { useState } from \"react\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { getSeachMovies } from \"services/fetchMovies\";\n\nexport default function MoviesPage() {\n    const [movies, setMovies] = useState([]);\n    const [error, setError] = useState(null);\n    const [searchParams, setSearchParams] = useSearchParams();\n    const movieName = searchParams.get('name') ?? '';\n\n    function onQueryString(name){\n        const nextParams = name !== '' ? { name } : {};\n        setSearchParams(nextParams);\n    }\n\n    useEffect(() => {\n        if (movieName === '') {\n            return;\n        }\n\n        getSeachMovies(movieName).then(({ results }) => setMovies(results)).catch(error => setError(error));\n    }, [movieName]);\n\n    return (\n        <main>\n            {error && <p>{error.message}! Please reload the page.</p>}\n            {!error && (\n                <>\n                    <SearchBox value={movieName} onChange={onQueryString} />\n                    {movieName !== '' && movies.length === 0 && <p>There are no films with this name</p>}\n                    <Movies movies={movies} />\n                </>\n            )}\n        </main>\n    );\n};","const API_KEY = '958b0b84a8c5fc6fca7bdd68332f6832';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport async function getTrendingMovies() {\n  const response = await fetch(\n    `${BASE_URL}trending/movie/day?page=1&api_key=${API_KEY}`\n  );\n  if (!response.ok) {\n    throw new Error('Failed');\n  }\n  return await response.json();\n}\n\nexport async function getSeachMovies(query) {\n  const response = await fetch(\n    `${BASE_URL}search/movie?query=${query}&page=1&&api_key=${API_KEY}`\n  );\n  if (!response.ok) {\n    throw new Error('Failed');\n  }\n  return await response.json();\n}\n\nexport async function getMovieDetails(id) {\n  const response = await fetch(`${BASE_URL}movie/${id}?&api_key=${API_KEY}`);\n  if (!response.ok) {\n    throw new Error('Fail');\n  }\n  return await response.json();\n}\n\n// export async function getMovieActors(id) {\n//   const response = await fetch(\n//     `${BASE_URL}${id}/movie/credits?&api_key=${API_KEY}`\n//   );\n//   if (!response.ok) {\n//     throw new Error('Fail');\n//   }\n//   return await response.json();\n// }\n\n// export async function getMovieReviews(id) {\n//   const response = await fetch(\n//     `${BASE_URL}${id}/movie/reviews?page=1&&api_key=${API_KEY}`\n//   );\n//   if (!response.ok) {\n//     throw new Error('Fail');\n//   }\n//   return await response.json();\n// }\n"],"names":["Movies","movies","location","useLocation","map","id","title","Link","to","state","from","Wrapper","styled","Input","Icon","HiSearch","SearchBox","value","onChange","type","evt","target","MoviesPage","useState","setMovies","error","setError","useSearchParams","searchParams","setSearchParams","movieName","get","useEffect","getSeachMovies","then","results","catch","message","name","length","API_KEY","BASE_URL","getTrendingMovies","fetch","response","ok","Error","json","query","getMovieDetails"],"sourceRoot":""}